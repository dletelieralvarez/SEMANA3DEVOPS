trigger:
- main  

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'SC_SEMANA3'
  location: 'northcentralus'
  resourceGroupName: 'GR_SEMANA3'
  virtualNetworkName: 'VNet-taller-DevOps'
  subnetName: 'Subnet-taller-DevOps'
  addressPrefix: '10.0.0.0/16'
  subnetPrefix: '10.0.1.0/24'
  securityGroupName: 'NSG-taller-DevOps'
  publicIpName: 'PublicIP-2-taller-DevOps'
  vmName: 'VM-2-taller-DevOps'
  vmSize: 'Standard_B1s'
  adminUsername: 'azureuser'
  adminPassword: 'Azureuser5261'

  # Variables de la imagen
  imagePublisher: 'Canonical'
  imageOffer: '0001-com-ubuntu-server-jammy'
  imageSku: '22_04-lts-gen2'
  imageVersion: 'latest'

steps:
- checkout: none

- script: |
    echo "Clonando repo público..."
    git clone https://github.com/dletelieralvarez/SEMANA3DEVOPS.git
    ls -la SEMANA3DEVOPS
  displayName: 'Clonar repo público de GitHub'

- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e

      echo "Creando grupo de recursos..."
      az group create --name $(resourceGroupName) --location "$(location)"
      echo "Grupo de recursos creado."

      echo "Creando red virtual..."
      az network vnet create \
        --resource-group $(resourceGroupName) \
        --name $(virtualNetworkName) \
        --address-prefix $(addressPrefix) \
        --subnet-name $(subnetName) \
        --subnet-prefix $(subnetPrefix)
      az network vnet wait --resource-group $(resourceGroupName) --name $(virtualNetworkName) --created
      echo "Red virtual creada."

      echo "Creando grupo de seguridad de red..."
      az network nsg create --resource-group $(resourceGroupName) --name $(securityGroupName)
      az network nsg wait --resource-group $(resourceGroupName) --name $(securityGroupName) --created
      echo "Grupo de seguridad de red creado."

      echo "Configurando reglas de NSG..."
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowSSH --protocol tcp --direction inbound --priority 1000 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 22 --access allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowHTTP8080 --protocol tcp --direction inbound --priority 1001 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 8080 --access allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowICMP --protocol icmp --direction inbound --priority 1002 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range '*' --access allow
      echo "Reglas de NSG configuradas."

      echo "Creando IP pública..."
      az network public-ip create --resource-group $(resourceGroupName) --name $(publicIpName) --sku Standard --allocation-method Static
      az network public-ip wait --resource-group $(resourceGroupName) --name $(publicIpName) --created
      echo "IP pública creada."

      echo "Creando máquina virtual..."
      az vm create \
        --resource-group $(resourceGroupName) \
        --name $(vmName) \
        --image $(imagePublisher):$(imageOffer):$(imageSku):$(imageVersion) \
        --size $(vmSize) \
        --admin-username $(adminUsername) \
        --admin-password $(adminPassword) \
        --vnet-name $(virtualNetworkName) \
        --subnet $(subnetName) \
        --nsg $(securityGroupName) \
        --public-ip-address $(publicIpName)
      az vm wait --resource-group $(resourceGroupName) --name $(vmName) --created
      echo "Máquina virtual creada."

      echo "Esperando a que la VM esté en ejecución..."
      while [[ "$(az vm get-instance-view --resource-group $(resourceGroupName) --name $(vmName) --query 'instanceView.statuses[?starts_with(code, `PowerState/`)][code]' -o tsv)" != "PowerState/running" ]]; do
        echo "VM aún no está lista, esperando 10s..."
        sleep 10
      done
      echo "VM iniciada correctamente."

      echo "Instalando Apache, Git y desplegando la aplicación..."
      az vm run-command invoke \
        --resource-group $(resourceGroupName) \
        --name $(vmName) \
        --command-id RunShellScript \
        --scripts "
          sudo apt update
          sudo apt install -y apache2 git
          sudo sed -i 's/80/8080/g' /etc/apache2/ports.conf
          sudo sed -i 's/*:80/*:8080/g' /etc/apache2/sites-enabled/000-default.conf
          sudo rm -rf /var/www/html/*
          sudo git clone https://github.com/dletelieralvarez/SEMANA3DEVOPS.git /var/www/html
          sudo rm -rf /var/www/html/.git /var/www/html/azure-pipeline.yml
          sudo chown -R www-data:www-data /var/www/html
          sudo systemctl restart apache2
        "
      echo "Aplicación desplegada y Apache reiniciado correctamente."











